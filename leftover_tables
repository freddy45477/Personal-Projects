the remaining tables when decide to use for later
create table patients (
    personal_id int not null auto_increment primary key,
    first_name varchar(100) not null,
    middle_name varchar(100),
    last_name varchar(100) not null,
    age int not null,
    sex enum('Male', 'Female', 'Other') not null,
    sex_other varchar(50) null,
    health_conditions enum('Healthy', 'Moderate', 'Critical') not null,
    last_login datetime null
)

create table health_issues( issue_id int not null auto_increment primary key, personal_id int not null, foreign key (personal_id) references patients(personal_id), issue_name varchar(100), diagnosed_date date, status enum('Active', 'Resolved', 'Chronic'), description text);

create table symptom_table( symptom_id int not null auto_increment primary key, personal_id int not null, foreign key (personal_id) references patients(personal_id), symptom_name varchar(50), start_date date, status enum('ongoing', 'resolved'), notes text );

create table medication (
    medication_id int not null auto_increment primary key,
    personal_id int not null,
    foreign key (personal_id) references patients(personal_id),
    medication_name varchar(100),
    dosage varchar(50),
    frequency varchar(50),
    start_date date,
    end_date date,
    status enum('ongoing', 'completed', 'discontinued'),
    type enum('taken', 'prescribed'),
    notes text
);

create table contacts ( contact_id int not null auto_increment primary key, personal_id int not null, foreign key (personal_id) references patients(personal_id), phone_number varchar(20), email text );

create table contacts ( contact_id int not null auto_increment primary key, personal_id int not null, foreign key (personal_id) references patients(personal_id), phone_number varchar(20), email text );

create table relatives_contacts ( relative_id int not null auto_increment primary key, personal_id int not null, relative_personal_id int null, relative_first_name varchar(100) null, relative_last_name varchar(100) null, constraint fk_relative foreign key (relative_personal_id) references patients(personal_id), constraint fk_personal foreign key (personal_id) references patients(personal_id), relationship_type varchar(50), phone_number varchar(20), email text );

table code
def insert_health_issues(personal_id, issue_name, diagnosed_date, status, description):
    #make only certain statuses to be accepted
    valid_statuses = {"Active", "Resolved", "Chronic"}
    #if the status is not in the valid status set then print msg
    if status not in valid_statuses:
        print (f"invalid status: {status}. Must be one of {valid_statuses}")
        return #stop function is it is invalid
    
    #connect to the database
    conn = get_db_connection()
    if conn is None:
        print("Cannot insert health issue information because database is not connected")
        return
    #allow cursor to allow python to interact with the database
    cursor = conn.cursor()

    #make a query with placeholders
    sql_query = """
    INSERT INTO health_issues(personal_id, issue_name, diagnosed_date, status, description)
    VALUES (%s, %s, %s, %s, %s)
    """

    #tuple of the values
    values = (personal_id, issue_name, diagnosed_date, status, description)

    #make cursor execute the query
    cursor.execute(sql_query, values)
    #save changeds
    conn.commit()
    #get the new health id added
    new_health_id = cursor.lastrowid
    #close cursor
    cursor.close()
    #close connection
    conn.close()

    print(f"Health information added: {issue_name}")
    return new_health_id

def insert_symptom(personal_id, symptom_name, start_date, status, notes):
    #make valid statuses for the status
    valid_statuses = {"ongoing", "resolved"}
    #if status is not in valid_statuses, print msg
    if status not in valid_statuses:
        print(f"invalid status {status}. Must be one of {valid_statuses}")
        return #stop if it is invalid
    
    #get db connection
    conn = get_db_connection()
    #if none connection, print msg and stop
    if conn is None:
        print("Cannot insert symptoms without a database connection.")
        return
    #open cursor to allow pyton to interact with mysql
    cursor = conn.cursor()
    
    #create sql query to insert
    sql_query = """
    INSERT INTO symptom_table(personal_id, symptom_name, start_date, status, notes)
    VALUES (%s, %s, %s, %s, %s)
    """
    #create a tuple to insert with the query
    values = (personal_id, symptom_name, start_date, status, notes)

    #execute it
    cursor.execute(sql_query, values)
    #save changes
    conn.commit()
    # get the new symptom id
    new_symptom_id = cursor.lastrowid
    #close cursor
    cursor.close()
    #close connection
    conn.close()

    print(f"New symptom added: {symptom_name}")
    return new_symptom_id

def insert_medication(personal_id, medication_name, dosage, frequency, start_date, end_date, status, type, notes):
    #make valid statuses
    valid_statuses = {"ongoing", "completed", "discontinued"}
    #if status is not in valid statuses, then stop
    if status not in valid_statuses:
        print(f"Invalid status: {status}. Must be one of {valid_statuses}")
        return

    #get db connection
    conn = get_db_connection()
    if conn is None:
        print("Cannot insert symptom without database connection")
        return
    
    #open the cursor
    cursor = conn.cursor()

    #make sql query and placeholders
    sql_query = """
    INSERT INTO medication(personal_id, medication_name, dosage, frequency, start_date, end_date, status, type, notes)
    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
    """
    #make a tuple for the values
    values = (personal_id, medication_name, dosage, frequency, start_date, end_date, status, type, notes)

    #execute the query and values
    cursor.execute(sql_query, values)
    #save changes
    conn.commit()
    #get the new medication id
    new_medication_id = cursor.lastrowid
    #close cursor
    cursor.close()
    #close connection
    conn.close()
    
    print(f"Medication added: {medication_name}.")
    return new_medication_id

def insert_contact(personal_id, phone_number, email):
    #get db connection
    conn = get_db_connection()
    if conn is None:
        print("Cannot insert contact without database connection")
        return
    
    #open the cursor
    cursor = conn.cursor()

    #make sql query and placeholders
    sql_query = """
    INSERT INTO contacts(personal_id, phone_number, email)
    VALUES (%s, %s, %s)
    """
    #make a tuple for the values
    values = (personal_id, phone_number, email)

    #execute the query and values
    cursor.execute(sql_query, values)
    #save changes
    conn.commit()
    #get the new medication id
    new_contact_id = cursor.lastrowid
    #close cursor
    cursor.close()
    #close connection
    conn.close()
    
    print(f"Medication added: {phone_number}, {email}.")
    return new_contact_id

def insert_relatives_contacts(personal_id, relative_personal_id, relative_first_name, relative_last_name, relationship_type, phone_number, email):
    #get db connection
    conn = get_db_connection()
    if conn is None:
        print("Cannot insert contact without database connection")
        return
    
    #open the cursor
    cursor = conn.cursor()

    #make sql query and placeholders
    
    sql_query = """
    #INSERT INTO relatives_contacts(personal_id, relative_personal_id, relative_first_name, relative_last_name, relationship_type, phone_number, email)
    #VALUES (%s, %s, %s, %s, %s, %s, %s)
    #"""
    #make a tuple for the values
    values = (personal_id, relative_personal_id, relative_first_name, relative_last_name, relationship_type, phone_number, email)

    #execute the query and values
    cursor.execute(sql_query, values)
    #save changes
    conn.commit()
    #get the new medication id
    new_relative_contact_id = cursor.lastrowid
    #close cursor
    cursor.close()
    #close connection
    conn.close()
    
    print(f"contacts added: {relative_first_name} {relative_last_name}, {relationship_type}.")
    return new_relative_contact_id
